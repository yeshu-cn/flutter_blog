{"title":"分层架构的演进","createTime":1597741125000,"updateTime":-1,"category":"架构设计","content":" \n  \n 之前做过一次以解决问题为动机，迭代架构的分享。这次是从架构演化的角度解释架构。 \n 虽然角度不同，但是最终得到的架构结果是相同的。 \n  \n ## 架构的工作 \n 架构可以细分为 \n * 代码架构：关注怎么写高质量代码 \n * 工程架构：关注怎么快速的迭代开发产品 \n  \n 代码架构 \n 1. 梳理业务逻辑，定义业务模型，业务服务 \n 2. 整理出清晰的表示层，业务层，持久层边界 \n 3. 持久层实现方案 \n  \n 工程架构 \n 1. 组件化业务模块 \n 2. 重构项目源文件结构，优化团队协作（实现aar,module等工作） \n 3. 优化编译，发布流程 \n  \n ## 代码架构有哪些 \n  \n 谈起架构，经常会听到分层架构，三层架构，clean架构，MVC,MVP,MVVM，他们之间有什么关系呢？ \n  \n 1. 架构的核心是分层，三层架构是分层思想的具体实现，clean架构也是分层思想的具体实现，不过相比三层架构各个角色的描述更加详细。 \n 2. MVC,MVP,MVVM只是分层架构中实现表现层的一种设计模式。 \n  \n **分层架构** \n > 分层架构的优点 \n （1）开发人员的专业分工，专注理解某一层。  \n （2）可以很容易用新的实现来替换原有层次的实现。  \n （3）降低了系统间的依赖。  \n （4）有利于复用。  \n  \n  \n ### 三层架构 \n ![屏幕快照 2020-08-13 下午5.48.26](%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-08-13%20%E4%B8%8B%E5%8D%885.48.26.png) \n  \n 服务端的SSH框架中的三层架构实现示意图 \n ![屏幕快照 2020-08-13 下午7.54.54](%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-08-13%20%E4%B8%8B%E5%8D%887.54.54.png) \n  \n 依赖规则：依赖接口，从上到下单向依赖 \n  \n #### 架构的问题 \n 登陆时需要获取用户昵称，签名，年龄，帖子个数信息。 \n version 1: 登陆时，客户端会请求四次网络 \n ```java \n interface UserService { \n     public String getUserName(); \n     public Int getUserAge(); \n     public String getUserSignature(); \n } \n  \n interface PostService { \n     public Int getPostCountByUid(int uid); \n } \n ``` \n 问题：客户端使用起来不仅繁琐，而且多次网络请求消耗手机性能 \n  \n version 2: 客户端只调用一个**聚合后**的接口 \n ```java \n interface LoginService { \n     public LoginInfo getLoginData(); \n } \n ``` \n 问题：客户端需求版本升级，或者支持一个新的App登陆，现在登陆只需要获取昵称，年龄，帖子个数。那么现在这个登陆接口就不能用了。于是我们会 \n 1. 直接修改`getLoginData()`方法 \n 2. 在`LoginServcie`中新增一个方法 \n  \n 但不管哪种做法，都在编辑了老文件，都破坏了开闭原则。 \n  \n 观察发现上面的代码有一个特征：`UserService`,`PostService`中的方法是不会变化的，但是LoginService中的方法会随不同的App,不同版本的App发生变化。那么该如何管理这部分的代码呢？ \n  \n ### 四层架构 \n  \n ![](15973952187597.jpg) \n  \n * User Interface: 用户交互界面，等同于上面的表示层 \n * Application: 应用层，定义软件要完成的任务。 \n * Domain: 领域层，负责业务概念，业务规则的实现。 \n * Infrastructure: 基础实施层，向其他层提供通用的技术能力：为应用层传递消息，为领域层提供持久化机制，为用户界面层绘制屏幕组件，等等。 \n  \n 解决的问题： \n * 分离通用的企业业务和特定的应用业务 \n * 分离业务逻辑和技术细节，Domain是核心的业务逻辑，Infrastructure是技术细节 \n ![](15975665211545.jpg) \n  \n ### clean架构 \n  \n clean架构是四层架构细想的更详细的实践指导，明确的定义了角色名称 \n 1. Entities： 领域层业务，Enterprise Business Rules \n 2. Use Cases: 应用层业务, Application Business Rules \n 3. 明确的定义了`GateWays`,`Controllers`,`Presenters`等业务层和展示层适桥梁的中间角色。 \n  \n ![](15973121341575.jpg) \n  \n 依赖规则 \n * 依赖接口，从外到内单向依赖。内部不知道外部的任何规则 \n  \n ## Android中的clean架构具体实现 \n ![屏幕快照 2020-08-17 下午3.26.53](%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202020-08-17%20%E4%B8%8B%E5%8D%883.26.53.png) \n  \n  \n 根据上图可以划分为四个Moduel: \n * UI:界面 \n * DB:数据存储实现细节 \n * Device:设备，平台相关功能实现细节，如同步硬件数据，通知等 \n * 业务逻辑 \n  \n 但是如果真的这样去执行，可能会有过度设计的效果，对这个四个moduel进一步进行重构分析。 \n  \n 由于DB,Device，UI是和应用相关的，不同的应用实现细节可能不同，所以把四个Module分为两类： \n * 应用层（App）: UI,DB,Device. \n * 业务层(Domain): Application Business Rules, Enterprise Business Rules. \n  \n 如果多个应用中DB,Device技术实现细节相同，则将代码下沉到业务层(Domain)中。 \n 注意，DB,Device代码上还是通过package和UI层区分开的，只是工程管理上把他们放在了应用层(App)。 \n  \n ## 参考资料 \n * [分层体系结构](https://baike.baidu.com/item/%E5%88%86%E5%B1%82%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84) \n * [The Clean Architecture](https://zhuanlan.zhihu.com/p/64343082) \n * [DDD分层架构的三种模式](https://www.jianshu.com/p/a775836c7e25?from=groupmessage) \n  \n  \n  \n  \n  \n  \n  \n "}