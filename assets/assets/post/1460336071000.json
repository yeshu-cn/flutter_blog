{"title":"获取图片","createTime":1460336071000,"updateTime":1460339688000,"category":"default","content":" \n  \n   \n **Uri格式有下面三种：**   \n 1. file:////storage/emulated/0/123/绑定手环/绑定手环_其他用户绑定.png \n 2. content://media/external/images/media/75342 \n 3. content://com.android.providers.media.documents/document/image:75342 \n  \n  \n **Uri处理** \n ```java \n InputStream is = getActivity().getContentResolver().openInputStream(uri); \n ``` \n 上面代码可以打开1和2格式的Uri,3格式的Uri打开会抛异常： \n  \n ``` \n java.lang.SecurityException: Permission Denial: reading com.android.providers.media.MediaDocumentsProvider uri content://com.android.providers.media.documents/document/image:75343 from pid=24763, uid=10209 requires android.permission.MANAGE_DOCUMENTS, or grantUriPermission() \n ``` \n  \n  \n **Uri获取**   \n  \n ```java \n \t\t\tif (Build.VERSION.SDK_INT < SystemInfo.ANDROID_VERSION_CODE.KITKAT){ \n                 intent = new Intent(); \n                 intent.setAction(Intent.ACTION_GET_CONTENT); \n                 intent.setType(\"image/*\"); \n                 getActivity().startActivityForResult(intent, REQ_PHOTO); \n             } else { \n                 intent = new Intent(Intent.ACTION_OPEN_DOCUMENT); \n                 intent.addCategory(Intent.CATEGORY_OPENABLE); \n                 intent.setType(\"image/*\"); \n                 getActivity().startActivityForResult(intent, REQ_PHOTO_KITKAT); \n             } \n ``` \n  \n `Intent.ACTION_GET_CONTENT` 4.4以前选择图片: \n  \n * file:////storage/emulated/0/123/绑定手环/绑定手环_其他用户绑定.png \n * content://media/external/images/media/75342 \n  \n `Intent.ACTION_GET_CONTENT` 4.4以后选择`相册`中图片： \n  \n * file:////storage/emulated/0/123/绑定手环/绑定手环_其他用户绑定.png \n * content://media/external/images/media/75342 \n  \n `Intent.ACTION_GET_CONTENT` 4.4以后选择`最近`中图片，或者`文件管理器`中图片： \n  \n * content://com.android.providers.media.documents/document/image:75342 \n  \n `Intent.ACTION_OPEN_DOCUMENT` 4.4以后以这种方式选择图片都返回： \n  \n * content://com.android.providers.media.documents/document/image:75342 \n  \n  \n 4.4以前Android会打开注册了监听`Intent.ACTION_GET_CONTENT`的App,但4.4以后Android会打开一个`documentsui `的内置程序，根据其中选择图片的位置不同，返回不同格式的Uri。 \n  \n  \n 即4.4以前使用`Intent.ACTION_GET_CONTENT`选择图片方式和返回是固定的： \n  \n * file:////storage/emulated/0/123/绑定手环/绑定手环_其他用户绑定.png \n * content://media/external/images/media/75342 \n  \n 但4.4以后使用`Intent.ACTION_GET_CONTENT`选择图片时，会根据选择的位置（`最近`，`相册`和`文件管理器`等）返回不同格式的Uri。 \n  \n 所以4.4以后使用`Intent.ACTION_OPEN_DOUCMENT`来选择图片返回固定格式的Uri。 \n  \n  \n **`Storage access framework`中的`Uri`使用** \n  \n ```java \n     @TargetApi(Build.VERSION_CODES.KITKAT) \n     public static String getPath(final Context context, final Uri uri) { \n  \n         final boolean isKitKat = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT; \n  \n         // DocumentProvider \n         if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) { \n             // ExternalStorageProvider \n             if (isExternalStorageDocument(uri)) { \n                 final String docId = DocumentsContract.getDocumentId(uri); \n                 final String[] split = docId.split(\":\"); \n                 final String type = split[0]; \n  \n                 if (\"primary\".equalsIgnoreCase(type)) { \n                     return Environment.getExternalStorageDirectory() + \"/\" + split[1]; \n                 } \n  \n                 // TODO handle non-primary volumes \n             } \n             // DownloadsProvider \n             else if (isDownloadsDocument(uri)) { \n  \n                 final String id = DocumentsContract.getDocumentId(uri); \n                 final Uri contentUri = ContentUris.withAppendedId( \n                         Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id)); \n  \n                 return getDataColumn(context, contentUri, null, null); \n             } \n             // MediaProvider \n             else if (isMediaDocument(uri)) { \n                 final String docId = DocumentsContract.getDocumentId(uri); \n                 final String[] split = docId.split(\":\"); \n                 final String type = split[0]; \n  \n                 Uri contentUri = null; \n                 if (\"image\".equals(type)) { \n                     contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI; \n                 } else if (\"video\".equals(type)) { \n                     contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI; \n                 } else if (\"audio\".equals(type)) { \n                     contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI; \n                 } \n  \n                 final String selection = \"_id=?\"; \n                 final String[] selectionArgs = new String[] { \n                         split[1] \n                 }; \n  \n                 return getDataColumn(context, contentUri, selection, selectionArgs); \n             } \n         } \n         // MediaStore (and general) \n         else if (\"content\".equalsIgnoreCase(uri.getScheme())) { \n  \n             // Return the remote address \n             if (isGooglePhotosUri(uri)) \n                 return uri.getLastPathSegment(); \n  \n             return getDataColumn(context, uri, null, null); \n         } \n         // File \n         else if (\"file\".equalsIgnoreCase(uri.getScheme())) { \n             return uri.getPath(); \n         } \n  \n         return null; \n     } \n  \n     /** \n      * Get the value of the data column for this Uri. This is useful for \n      * MediaStore Uris, and other file-based ContentProviders. \n      * \n      * @param context The context. \n      * @param uri The Uri to query. \n      * @param selection (Optional) Filter used in the query. \n      * @param selectionArgs (Optional) Selection arguments used in the query. \n      * @return The value of the _data column, which is typically a file path. \n      */ \n     public static String getDataColumn(Context context, Uri uri, String selection, \n                                        String[] selectionArgs) { \n  \n         Cursor cursor = null; \n         final String column = \"_data\"; \n         final String[] projection = { \n                 column \n         }; \n  \n         try { \n             cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, \n                     null); \n             if (cursor != null && cursor.moveToFirst()) { \n                 final int index = cursor.getColumnIndexOrThrow(column); \n                 return cursor.getString(index); \n             } \n         } finally { \n             if (cursor != null) \n                 cursor.close(); \n         } \n         return null; \n     } \n  \n  \n     /** \n      * @param uri The Uri to check. \n      * @return Whether the Uri authority is ExternalStorageProvider. \n      */ \n     public static boolean isExternalStorageDocument(Uri uri) { \n         return \"com.android.externalstorage.documents\".equals(uri.getAuthority()); \n     } \n  \n     /** \n      * @param uri The Uri to check. \n      * @return Whether the Uri authority is DownloadsProvider. \n      */ \n     public static boolean isDownloadsDocument(Uri uri) { \n         return \"com.android.providers.downloads.documents\".equals(uri.getAuthority()); \n     } \n  \n     /** \n      * @param uri The Uri to check. \n      * @return Whether the Uri authority is MediaProvider. \n      */ \n     public static boolean isMediaDocument(Uri uri) { \n         return \"com.android.providers.media.documents\".equals(uri.getAuthority()); \n     } \n  \n     /** \n      * @param uri The Uri to check. \n      * @return Whether the Uri authority is Google Photos. \n      */ \n     public static boolean isGooglePhotosUri(Uri uri) { \n         return \"com.google.android.apps.photos.content\".equals(uri.getAuthority()); \n     } \n ``` \n  \n 官方解析方法见：<http://developer.android.com/intl/zh-cn/guide/topics/providers/document-provider.html> \n  \n 参考资料：<http://stackoverflow.com/questions/19834842/android-gallery-on-kitkat-returns-different-uri-for-intent-action-get-content#> \n  \n **4.4中新增特性：Storage Access Framework**   \n 作用目的：The SAF makes it simple for users to browse and open documents, images, and other files across all of their their preferred document storage providers. A standard, easy-to-use UI lets users browse files and access recents in a consistent way across apps and providers \n  \n 让用户通过一个storage providers访问所有资源，并且提供一个统一的UI浏览访问图片，文件等。 \n  \n  \n 什么是时候返回的Uri是Provider中提供的？什么时候是直接“file:////绝对路径”的格式？ \n  \n Uri和URI是两个不同的东西： \n URI格式：`http://username:password@host:8080/directory/file?query#fragment`"}