{"title":"Android混淆和反编译结果查看","createTime":1591670827000,"updateTime":-1,"category":"Android","content":" \n  \n 源文件 \n ```kotlin \n class MainActivity : AppCompatActivity() { \n  \n     override fun onCreate(savedInstanceState: Bundle?) { \n         super.onCreate(savedInstanceState) \n         setContentView(R.layout.activity_main) \n         Log.i(\"yeshu\", \"hello log\") \n     } \n } \n ``` \n 反编译后到smali文件 \n  \n ```smali \n .method protected onCreate(Landroid/os/Bundle;)V \n     .locals 1 \n  \n     .line 10 \n     invoke-super {p0, p1}, Landroidx/appcompat/app/AppCompatActivity;->onCreate(Landroid/os/Bundle;)V \n  \n     const p1, 0x7f0a001c \n  \n     .line 11 \n     invoke-virtual {p0, p1}, Lcom/example/logdemo/MainActivity;->setContentView(I)V \n  \n     const-string p1, \"yeshu\" \n  \n     const-string v0, \"hello log\" \n  \n     .line 12 \n     invoke-static {p1, v0}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I \n  \n     return-void \n .end method \n ``` \n  \n koin转换得到的java文件 \n ```java \n @Metadata(bv = {1, 0, 3}, d1 = {\"\\000\\030\\n\\002\\030\\002\\n\\002\\030\\002\\n\\002\\b\\002\\n\\002\\020\\002\\n\\000\\n\\002\\030\\002\\n\\000\\030\\0002\\0020\\001B\\005\\006\\002\\020\\002J\\022\\020\\003\\032\\0020\\0042\\b\\020\\005\\032\\004\\030\\0010\\006H\\024\\006\\007\"}, d2 = {\"Lcom/example/logdemo/MainActivity;\", \"Landroidx/appcompat/app/AppCompatActivity;\", \"()V\", \"onCreate\", \"\", \"savedInstanceState\", \"Landroid/os/Bundle;\", \"app_release\"}, k = 1, mv = {1, 1, 16}) \n public final class MainActivity extends AppCompatActivity { \n   private HashMap _$_findViewCache; \n    \n   public void _$_clearFindViewByIdCache() { \n     HashMap hashMap = this._$_findViewCache; \n     if (hashMap != null) \n       hashMap.clear();  \n   } \n    \n   public View _$_findCachedViewById(int paramInt) { \n     if (this._$_findViewCache == null) \n       this._$_findViewCache = new HashMap<Object, Object>();  \n     View view2 = (View)this._$_findViewCache.get(Integer.valueOf(paramInt)); \n     View view1 = view2; \n     if (view2 == null) { \n       view1 = findViewById(paramInt); \n       this._$_findViewCache.put(Integer.valueOf(paramInt), view1); \n     }  \n     return view1; \n   } \n    \n   protected void onCreate(Bundle paramBundle) { \n     super.onCreate(paramBundle); \n     setContentView(2131361820); \n     Log.i(\"yeshu\", \"hello log\"); \n   } \n } \n  \n ``` \n  \n  \n  \n ## 没有开启混淆优化时 \n  \n ```kotlin \n class MainActivity : AppCompatActivity() { \n     val debug: Boolean = false \n     override fun onCreate(savedInstanceState: Bundle?) { \n         super.onCreate(savedInstanceState) \n         setContentView(R.layout.activity_main) \n         if (debug){ \n             Log.i(\"yeshu\", \"hello log\") \n         } else { \n             Log.i(\"yeshu\", \"hello log  true\") \n         } \n     } \n  \n     private fun test() { \n         Log.i(\"yeshu\", \"wo shen me dou mei zuo \") \n     } \n } \n ``` \n  \n  \n  \n * val debug 会让编译器优化掉无效的语句，但是var debug不会。 \n * 默认的无效方法 test()没有被删除掉 \n  \n  \n ## 开启混淆，优化 \n 启用压缩，优化，混淆后只要逻辑上没执行到的代码就被删除了，依赖库中没用到的代码也都删除了。 \n  \n ``` \n minifyEnabled true \n ``` \n  \n  \n  \n ```java \n public final class MainActivity extends h { \n   public void onCreate(Bundle paramBundle) { \n     super.onCreate(paramBundle); \n     setContentView(2131361820); \n     Log.i(\"yeshu\", \"hello log  true\"); \n   } \n } \n ``` \n  \n ```kotlin \n class MainActivity : AppCompatActivity() { \n     var debug: Boolean = false \n     override fun onCreate(savedInstanceState: Bundle?) { \n         super.onCreate(savedInstanceState) \n         setContentView(R.layout.activity_main) \n         if (debug){ \n             Log.i(\"yeshu\", \"hello log\") \n             test() \n         } else { \n             Log.i(\"yeshu\", \"hello log  true\") \n         } \n     } \n  \n     private fun test() { \n         Log.i(\"yeshu\", \"wo shen me dou mei zuo \") \n     } \n } \n ``` \n  \n test()方法和if判断中的false分支都会被删除 \n  \n  \n  \n ## 子module和主项目之间的混淆配置关系 \n  \n AAR 库：`<library-dir>/proguard.txt` \n  \n JAR 库：`<library-dir>/META-INF/proguard/` \n  \n  \n  \n 如果某个 AAR 库是使用它自己的 ProGuard 规则文件发布的，并且您将该 AAR 库作为编译时依赖项纳入到项目中，则 R8 在编译项目时会自动应用其规则。 \n  \n 如果 AAR 库需要某些保留规则才能正常运行，那么使用该库随附的规则文件将非常有用。 也就是说，库开发者已经为您执行了问题排查步骤。 \n  \n 不过，请注意，由于 ProGuard 规则是累加的，因此 AAR 库依赖项包含的某些规则无法移除，并且可能会影响对应用其他部分的编译。例如，如果某个库包含停用代码优化的规则，该规则会针对整个项目停用优化 \n  \n ## 查看整个项目的规则 \n  \n 要输出 R8 在构建项目时应用的所有规则的完整报告，请将以下代码添加到模块的 `proguard-rules.pro` 文件中： \n  \n  \n  \n ``` \n // You can specify any path and filename. \n     -printconfiguration ~/tmp/full-r8-config.txt \n ``` \n  \n ## 给不同的flavor配置不同的混淆规则 \n  \n ``` \n android { \n         ... \n         buildTypes { \n             release { \n                 minifyEnabled true \n                 proguardFiles getDefaultProguardFile( \n                   'proguard-android-optimize.txt'), \n                   // List additional ProGuard rules for the given build type here. By default, \n                   // Android Studio creates and includes an empty rules file for you (located \n                   // at the root directory of each module). \n                   'proguard-rules.pro' \n             } \n         } \n         flavorDimensions \"version\" \n         productFlavors { \n             flavor1 { \n               ... \n             } \n             flavor2 { \n                 proguardFile 'flavor2-rules.pro' \n             } \n         } \n     } \n      \n ``` \n  \n ## 自定义要保留的代码 \n  \n 说明了它在什么情况下可能会错误地移除代码： \n  \n - 当您的应用通过 Java 原生接口 (JNI) 调用方法时 \n - 当您的应用在运行时查询代码时（如使用反射） \n  \n ``` \n -keep public class MyClass \n  \n @Keep \n ``` \n  \n ## 缩减资源 \n  \n 两个必须同时开启 \n  \n ``` \n shrinkResources true \n minifyEnabled true \n ``` \n  \n ## 移除未使用的备用资源 \n  \n 以下代码段展示了如何设置只保留英语和法语的语言资源： \n  \n ``` \n android { \n         defaultConfig { \n             ... \n             resConfigs \"en\", \"fr\" \n         } \n     } \n      \n ``` \n  \n ## 重复资源的合并规则 \n  \n Gradle 会按以下级联优先顺序合并重复资源： \n  \n 依赖项 → 主资源 → 版本变种 → 版本类型 \n  \n 例如，如果某个重复资源同时出现在主资源和版本变种中，Gradle 会选择版本变种中的资源。 \n  \n  \n  \n ## R8代码优化 \n  \n - 如果您的代码从未采用过给定 if/else 语句的 `else {}` 分支，R8 可能会移除 `else {}` 分支的代码。 \n - 如果您的代码只在一个位置调用某个方法，R8 可能会移除该方法并将其内嵌在这一个调用点。 \n - 如果 R8 确定某个类只有一个唯一的子类且该类本身未实例化（例如，一个仅由一个具体实现类使用的抽象基类），它就可以将这两个类合并在一起并从应用中移除一个类。 \n  \n ## 生成移除的（或保留的）代码的报告 \n  \n 是否可以根据移除报告来优化代码，提高代码质量 \n  \n ## 排查资源缩减问题 \n  \n 同样通过查看资源压缩日志，来提高代码质量 \n  \n  \n  \n ## 删除log日志 \n  \n ``` \n -assumenosideeffects class android.util.Log { \n           public static boolean isLoggable(java.lang.String, int); \n           public static int v(...); \n           public static int i(...); \n           public static int w(...); \n           public static int d(...); \n           public static int e(...); \n       } \n ``` \n  \n 不管代码有没有执行，都会直接删除掉 \n  \n ```kotlin \n class MainActivity : AppCompatActivity() { \n     var debug: Boolean = false \n     override fun onCreate(savedInstanceState: Bundle?) { \n         super.onCreate(savedInstanceState) \n         setContentView(R.layout.activity_main) \n         if (debug){ \n             Log.i(\"yeshu\", \"hello log\") \n             test() \n         } else { \n             Log.i(\"yeshu\", \"hello log  true\") \n         } \n     } \n  \n     private fun test() { \n         Log.i(\"yeshu\", \"wo shen me dou mei zuo \") \n     } \n }\t \n ``` \n  \n  \n  \n ```java \n public final class MainActivity extends h { \n   public void onCreate(Bundle paramBundle) { \n     super.onCreate(paramBundle); \n     setContentView(2131361820); \n   } \n } \n ``` \n  \n  \n  \n ## 反编译出来的java文件和源文件的区别 \n  \n ``` \n # virtual methods \n .method public onCreate(Landroid/os/Bundle;)V \n     .locals 1 \n  \n     invoke-super {p0, p1}, La/b/k/h;->onCreate(Landroid/os/Bundle;)V \n  \n     const p1, 0x7f0a001c \n  \n     invoke-virtual {p0, p1}, La/b/k/h;->setContentView(I)V \n  \n     const-string p1, \"hello log\" \n  \n     const-string v0, \"yeshu\" \n  \n     .line 1 \n     invoke-static {v0, p1}, Landroid/util/Log;->v(Ljava/lang/String;Ljava/lang/String;)I \n  \n     return-void \n .end method \n ``` \n  \n  \n  \n ```java \n  \n public final class MainActivity extends h { \n   public void onCreate(Bundle paramBundle) { \n     super.onCreate(paramBundle); \n     setContentView(2131361820); \n     Log.v(\"yeshu\", \"hello log\"); \n   } \n } \n  \n ``` \n  \n  \n  \n 源文件 \n  \n ```kotlin \n class MainActivity : AppCompatActivity() { \n     override fun onCreate(savedInstanceState: Bundle?) { \n         super.onCreate(savedInstanceState) \n         setContentView(R.layout.activity_main) \n         MyLog.log(\"hello log\") \n     } \n } \n  \n ``` \n  \n  \n  \n ```kotlin \n object MyLog { \n     var debug: Boolean = true \n  \n     fun log(msg: String) { \n         if (debug) { \n             Log.v(\"yeshu\", msg) \n         } \n     } \n } \n ``` \n  \n  \n  \n  \n  \n ## 参考 \n  \n https://developer.android.com/studio/build/shrink-code#shrink-code"}