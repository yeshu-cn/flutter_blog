{"title":"Android  Tips (Dialog和线程中更新UI问题)","createTime":1459281351000,"updateTime":1459283374000,"category":"default","content":" \n  \n **DialogFragment** \n  \n * `onCreate()`中必须调用`super.onCreate(savedInstanceState);` \n * 使用`newInstance()`方法来获取实例，使用setArguments来传递参数，避免在横竖屏切换的时候Fragment自动调用自己的无参构造函数，导致数据丢失。 \n ```java \n static MyDialogFragment newInstance(int num) { \n         MyDialogFragment f = new MyDialogFragment(); \n  \n         // Supply num input as an argument. \n         Bundle args = new Bundle(); \n         args.putInt(\"num\", num); \n         f.setArguments(args); \n  \n         return f; \n     } \n  \n     @Override \n     public void onCreate(Bundle savedInstanceState) { \n         super.onCreate(savedInstanceState); \n         mNum = getArguments().getInt(\"num\"); \n     } \n  \n ``` \n  \n * Dialog重复`show()`或者重复`dismiss()`会怎么样 \n  \n ``` \n mCustomDialog = CustomDialog.newInstance(); \n mCustomDialog.show(getFragmentManager(), \"\"); \n mCustomDialog.show(getFragmentManager(), \"\"); \n  \n java.lang.IllegalStateException: Fragment already added: CustomDialog{70c4f46 #0 } \n ``` \n  \n 重复`dismiss()`没反应,看源码有做判断 \n  \n ``` \n void dismissInternal(boolean allowStateLoss) { \n         if (mDismissed) { \n             return; \n         } \n         mDismissed = true; \n         mShownByMe = false; \n         if (mDialog != null) { \n             mDialog.dismiss(); \n             mDialog = null; \n         } \n         .... \n     } \n ``` \n  \n * 线程中创建和隐藏Dialog都没有问题,就是说Dialog的创建和隐藏不算是更新UI操作 \n * 不能再线程中创建Toast \n  \n `java.lang.RuntimeException: Can't create handler inside thread that has not called Looper.prepare()` \n  \n Toast含有一个TN的成员，TN成员初始化时会new一个Handler,但是handler创建时会判断该线程是否`Looper.prepare()`过。 \n ``` \n     public Handler(Callback callback, boolean async) { \n        //省略... \n  \n         mLooper = Looper.myLooper(); \n         if (mLooper == null) { \n             throw new RuntimeException( \n                 \"Can't create handler inside thread that has not called Looper.prepare()\"); \n         } \n         mQueue = mLooper.mQueue; \n         mCallback = callback; \n         mAsynchronous = async; \n     } \n ``` \n  \n * 线程中启动Activity，关闭Activity不算更新UI."}