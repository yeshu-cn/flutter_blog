{"title":"Android gradle","createTime":1474451414000,"updateTime":-1,"category":"default","content":" \n  \n  \n #### 项目编译发布 \n  \n ProductFlavor \n  \n 基本原理是利用Gradle的`mainfest merger`功能。 \n  \n build.gradle 文件 \n  \n ``` \n android { \n \t \n \tdefaultConfig { \n \t\tmainfestPlaceholders = [UMENG_CHANNEL_VALUE: \"debug\"] \n \t} \n \t \n \tproductFlavors { \n \t\tdebug { \n \t\t\tmainfestPlaceholders = [UMENG_CHANNEL_VLAUE: \"debug\"] \n \t\t} \n \t\t \n \t\trelease { \n \t\t\tmainfestPlaceholders = [UMENG_CHANNEL_VLAUE: \"debug\"] \n \t\t} \n \t} \n \t \n \tproductFlavors.all { flavor -> \n \t\tflavor.mainfestPlaceholders = [UMENG_CHANNEL_VALUE: name] \n \t} \n } \n ``` \n  \n AndroidMainfest.xml 文件 \n  \n ``` \n \t<meta-data \n         android:name=\"UMENG_CHANNEL\" \n         android:value=\"${UMENG_CHANNEL_VALUE}\" /> \n ``` \n  \n ##### 混淆mapping.txt文件位置 \n  \n 生成在 `build/outputs/mapping` 目录下 \n  \n  \n ##### Debug启动混淆，Release不启用混淆 \n  \n ``` \n android { \n \tbuildTypes { \n \t\trelease { \n \t\t\tminifyEnable true //是否启用混淆 \n \t\t\tproguardFiles getDefaultProguardFile('proguard-android.txt') \n \t\t} \n \t} \n } \n ``` \n  \n ##### 自定义BuildConfig，Debug,Release版本开启或关闭日志 \n  \n ``` \n buildTypes { \n   release { \n     buildConfigField \"boolean\", \"LOG_DEBUG\", \"false\" \n     proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' \n     signingConfig signingConfigs.release \n   } \n   debug{ \n     buildConfigField \"boolean\", \"LOG_DEBUG\", \"true\" \n   } \n } \n  \n // java代码中 \n if(BuildConfig.LOG_DEBUG){ \n     //开启日志 \n }else{ \n \t//关闭日志 \n } \n  \n ``` \n  \n ##### 自定义BuildConfig，Debug，Release版本使用不同的服务器地址 \n  \n ``` \n buildTypes { \n   release { \n     buildConfigField \"String\", \"API_SERVER_URL\", \"https://debug.api.com\" \n     proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' \n     signingConfig signingConfigs.release \n   } \n   debug{ \n         buildConfigField \"String\", \"API_SERVER_URL\", \"https://release.api.com\" \n   } \n } \n ``` \n  \n ##### 签名文件配置 \n  \n ``` \n \t// 将签名信息直接写在了代码里，不安全 \n    signingConfigs { \n         release { \n             storeFile file('android-app.keystore') \n             storePassword '123456' \n             keyAlias 'android' \n             keyPassword '1234567' \n         } \n     } \n      \n \t// 不要把签名信息写在代码里面 \n    signingConfigs { \n         release { \n         \t// this requires system environments to be created for each project on each computer \n         \t//需要设置环境变量$PATH \n             def keystore = System.getenv(\"KEYSTORE\") \n             storeFile file(keystore == null ? \"/dev/null\" : keystore) \n             storePassword System.getenv(\"KEYSTORE_PASSWD\") \n             keyAlias System.getenv(\"KEYALIAS\") \n             keyPassword System.getenv(\"KEYALIAS_PASSWD\") \n         } \n     } \n  \n     buildTypes { \n         release { \n             minifyEnabled true \n             proguardFiles file('proguard-project.txt') \n             signingConfig signingConfigs.release //配置release包的签名 \n         } \n  \n         debug { \n         } \n     } \n ``` \n  \n [Sign APK without putting keystore info in build.gradle](http://stackoverflow.com/questions/20562189/sign-apk-without-putting-keystore-info-in-build-gradle) \n  \n  \n  \n ##### 修改生成apk的名字 \n  \n ``` \n android.applicationVariants.all { variant ->   \n     def file = variant.outputFile   \n     variant.outputFile = new File(file.parent, file.name.replace(\".apk\", \"-\" + defaultConfig.versionName + \".apk\"))   \n }   \n ``` \n  \n ##### gradle 常用命令 \n  \n ``` \n ./gradlew -v \n ./gradlew clean  \n ./gradlew tasks \n ./gradlew --help \n ./gradlew build \n ./gradlew assembleDebug \n ./gradlew assembleRelease \n ./gradlew assembleWandoujiaRelease  \n ./gradlew assembleWandoujia \n ./gradlew installRelease \n ./gradlew uninstallRelease \n ``` \n  \n ##### 优化编译设置 \n  \n * 将gradle作为守护进程后台一直运行,Android studio本身已经是守护进程，使用命令行编译时需要设置一下。 \n * 设置多个project时并行编译，并行编译时各个project之间不能有依赖关系，否则可能会由于并行编译而编译失败。 \n  \n `.gradle/gradle.properties`文件中加入 \n  \n ``` \n org.gradle.daemon=true  \n org.gradle.parallel=true \n ``` \n  \n ##### 项目根目录下的`.gradle`目录和用户目录下的`~/.gradle`目录用途 \n  \n android studio手动下载gradle放在`～／.gradle/wrapper/dists`目录下 \n  \n gradle.properties文件，可以放在~/.gradle目录中，也可以放在项根目录中 \n  \n ``` \n ELEASE_STORE_FILE=～／project/android-app.keystore \n RELEASE_KEY_ALIAS=android \n RELEASE_STORE_PASSWORD=123456 \n RELEASE_KEY_PASSWORD=123456 \n ``` \n  \n 放在项目根目录中则表示局部的变量，放在用户目录中表示全局的变量。可以从Android Studio中看得出来。"}