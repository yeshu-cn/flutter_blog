{"title":"Typeface.createFromAsset 内存泄漏问题依然存在","createTime":1474340730000,"updateTime":-1,"category":"default","content":" \n  \n https://code.google.com/p/android/issues/detail?id=9904 \n  \n 这评论说在3.2上已经修复了该问题，新framework中也却是添加了`staem->unref()`,但是自己在5.0.2上使用自定义字体依然存在内存泄漏.不知道哪里造成的 \n  \n  \n  \n ```bash \n $ adb shell dumpsys meminfo work.yeshu.tfftest \n Applications Memory Usage (kB): \n Uptime: 167918 Realtime: 167918 \n  \n ** MEMINFO in pid 8200 [work.yeshu.tfftest] ** \n                    Pss  Private  Private  Swapped     Heap     Heap     Heap \n                  Total    Dirty    Clean    Dirty     Size    Alloc     Free \n                 ------   ------   ------   ------   ------   ------   ------ \n   Native Heap     3837     3760        0        0    12180    10072       15 \n   Dalvik Heap     4165     3764        0        0    32000    19470    12530 \n  Dalvik Other      732      732        0        0 \n         Stack      228      228        0        0 \n     Other dev        5        0        4        0 \n      .so mmap     1730      248      172      200 \n     .apk mmap      319        0       12        0 \n     .ttf mmap      146        0       40        0 \n     .dex mmap     2980        0     2876        0 \n     code mmap     1355        0      220        0 \n    image mmap     1538      876      364        0 \n    Other mmap      369        4      200        0 \n      Graphics     2720     2720        0        0 \n            GL     9276     9276        0        0 \n       Unknown     1994     1980        0        0 \n         TOTAL    31394    23588     3888      200    44180    29542    12545 \n  \n  Objects \n                Views:       32         ViewRootImpl:        1 \n          AppContexts:        3           Activities:        1 \n               Assets:        8        AssetManagers:        8 \n        Local Binders:       12        Proxy Binders:       16 \n     Death Recipients:        1 \n      OpenSSL Sockets:        0 \n  \n  SQL \n          MEMORY_USED:        0 \n   PAGECACHE_OVERFLOW:        0          MALLOC_SIZE:        0 \n  \n  \n  Asset Allocations \n     zip:/data/app/work.yeshu.tfftest-2/base.apk:/assets/SanzenPersonalUse.ttf: 351K \n     zip:/data/app/work.yeshu.tfftest-2/base.apk:/assets/SanzenPersonalUse.ttf: 351K \n ``` \n  \n 重复打开页面Asset Allocations会不停的增加 \n  \n 处理方法 \n  \n ```java \n public class FontCache { \n     private static Hashtable<String, Typeface> fontCache = new Hashtable<String, Typeface>(); \n  \n     public static Typeface get(String name, Context context) { \n         Typeface tf = fontCache.get(name); \n         if(tf == null) { \n             try { \n                 tf = Typeface.createFromAsset(context.getAssets(), name); \n             } \n             catch (Exception e) { \n                 return null; \n             } \n             fontCache.put(name, tf); \n         } \n         return tf; \n     } \n  \n } \n ``` \n  \n "}