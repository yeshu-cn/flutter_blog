{"title":"ViewPager中fragment滑动事件无效分析","createTime":1587436340000,"updateTime":-1,"category":"Android","content":" \n  \n 原因：`ViewPager`默认的`onInterceptTouchEvent`方法中在判断出正在滑动时就拦截了触摸事件。 \n  \n 解决: 子`View`收到`ACTION_DOWN`时调用`requestDisallowInterceptTouchEvent(true)`请求所有的父控件不要拦截 \n  \n ## 源码分析 \n 1. `ViewGroup`的`dispatchTouchEvent()`收到触摸事件 \n 2. `ViewPager`的`onInterceptTouchEvent()`判断是否正在进行拖动(`mIsBeingDragged`)，如果正在进行拖动就拦截事件，否则就不管（所以第一次`ACTION_DOWN`就成功分发到了子`View`上） \n 3. 子`View`的`onTouchEvent()`收到`ACTION_DOWN`事件后调用`requestDisallowInterceptTouchEvent(true)`申请不要拦截 \n  \n  \n  \n ### ViewGroup.dispatchTouchEvent() \n ```java \n if (actionMasked == MotionEvent.ACTION_DOWN) { \n     // ACTION_DOWN清除FLAG_DISALLOW_INTERCEPT标记 \n     resetTouchState(); \n } \n  \n // 分发事件等代码... \n  \n if (canceled || actionMasked == MotionEvent.ACTION_UP || actionMasked == MotionEvent.ACTION_HOVER_MOVE) { \n     // 最后事件结束了，还会清楚FLAG_DISALLOW_INTERCEPT标记 \n     resetTouchState(); \n ``` \n  \n 所以： \n > getParent().requestDisallowInterceptTouchEvent(true)是要在接收ACTION_DOWN之后，并在接收ACTION_UP或ACTION_CANCEL事件之前调用才有效。 \n  \n ### ViewPager.onInterceptTouchEvent() \n ```java \n public boolean onInterceptTouchEvent(MotionEvent ev) { \n     if (action != MotionEvent.ACTION_DOWN) { \n         // 如果正在滑动则拦截 \n         if (mIsBeingDragged) { \n             return true; \n         } \n     } \n      \n     switch (action) { \n         case MotionEvent.ACTION_MOVE: { \n             // 计算滑动距离，如果判断是滑动了则mIsBeingDragged为true \n             mIsBeingDragged = true \n         } \n         case MotionEvent.ACTION_DOWN: { \n              // 简化了，就当作第一次按下时，肯定不认为是滑动 \n             mIsBeingDragged = false                 \n         } \n     } \n      \n     // 所以第一次ACTION_DOWN的事件是可以被分发到子view的 \n     return mIsBeingDragged; \n } \n ``` \n ### View.onTouchEvent() \n ```java \n     override fun onTouchEvent(event: MotionEvent?): Boolean { \n         if (event?.action == MotionEvent.ACTION_DOWN) { \n             // 不要拦截我的事件 \n             parent.requestDisallowInterceptTouchEvent(true) \n         } \n         // 我要自己消费事件 \n         return true \n     } \n ``` \n  \n ### View.requestDisallowInterceptTouchEvent() \n ```java \n     @Override \n     public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) { \n         if (disallowIntercept) { \n             mGroupFlags |= FLAG_DISALLOW_INTERCEPT; \n         } else { \n             mGroupFlags &= ~FLAG_DISALLOW_INTERCEPT; \n         } \n  \n         // Pass it up to our parent \n         if (mParent != null) { \n             mParent.requestDisallowInterceptTouchEvent(disallowIntercept); \n         } \n     } \n ``` \n  \n **注意：**会递归请parent也不要拦截 \n ## 参考 \n * https://juejin.im/post/5d5b703de51d45620923885c"}