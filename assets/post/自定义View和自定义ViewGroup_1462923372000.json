{"title":"自定义View和自定义ViewGroup","createTime":1462923372000,"updateTime":1462923431000,"category":"default","content":" \n  \n ## 原理 \n 绘制`View`的三个流程 \n  \n 1. `measure`->`onMeasure`计算出`view`的大小`mMeasureWidth`和`mMeasuredHeight`，并置`mPrivateFlags`状态为已测量`PFLAG_MEASURED_DIMENSION_SET` \n 2. `layout`->`onLayout`根据子`view`的大小计算所有自`view`的位置坐标`mLeft`,`mTop`,`mBottom`,`mRight`,并置`mPrivateFlags3`为已布局`PFLAG3_IS_LAID_OUT` \n 3. `draw`->`onDraw`根据前面计算的坐标绘制`View`的具体内容 \n  \n Android中应用程序是按消息机制执行的，每次处理一个消息，如果该消息引起`View`的状态变化，则在代码中仅仅做一些状态表示，然后发送一个异步消息，而不是立即重绘。然后在下一次消息处理中，根据保存的状态数据，绘制不同的界面效果。 \n  \n layout_width意义：自己期望父视图给自己的大小，可以近似的看做是自己的大小设定。将和父视图的layout_width一起确定自己的大小。 \n  \n  \n ## CustomView \n  \n 可以参考`TextView`,`ImageView`源码 \n  \n 1. 继承自View \n 2. 重写onMeasure()方法 \n 3. 重写onDraw()方法 \n  \n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) \n 1. `widthMeasureSpec`, `heightMeasureSpec`由父视图通过xml中定义的`layout_width`,`layout_height`结合自己的大小算出来的子视图的大小`规格` \n 2. 在该函数中我们需要通过自己的**实际大小**结合**规格**算出最后的结果 \n 3. `resolveSize(width, widthMeasureSpec)`函数实现上述功能，第一个参数表示**实际大小**，第二个参数表示父视图传给我们的**规格** \n 4. `setMeasuredDimension `函数来设置最终的大小 \n  \n View没有子视图，所以不需要去调用子视图的`measure()`,不需要调用子视图的`layout()` \n  \n  \n ```java \n public class CustomView extends View { \n     private Paint mPaint; \n     private Drawable mDrawable; \n  \n     public CustomView(Context context) { \n         super(context); \n         init(); \n     } \n  \n     public CustomView(Context context, AttributeSet attrs) { \n         this(context, attrs, 0); \n     } \n  \n     public CustomView(Context context, AttributeSet attrs, int defStyleAttr) { \n         this(context, attrs, defStyleAttr, 0); \n     } \n  \n     @TargetApi(Build.VERSION_CODES.LOLLIPOP) \n     public CustomView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { \n         super(context, attrs, defStyleAttr, defStyleRes); \n         TypedArray a = context.getTheme().obtainStyledAttributes( \n                 attrs, \n                 R.styleable.CustomView, \n                 defStyleAttr, defStyleRes \n         ); \n  \n         mDrawable = a.getDrawable(R.styleable.CustomView_bg); \n         a.recycle(); \n  \n         init(); \n     } \n  \n     private void init() { \n         mPaint = new Paint(); \n         mPaint.setAntiAlias(true); \n         mPaint.setColor(Color.RED); \n         mPaint.setStyle(Paint.Style.STROKE); \n     } \n  \n     @Override \n     protected void onDraw(Canvas canvas) { \n         drawBackground(canvas); \n     } \n  \n     private void drawBackground(Canvas canvas) { \n         //getIntrinsicWidth获取的是图片拉伸后的大小 \n         int width = mDrawable.getIntrinsicWidth(); \n         int height = mDrawable.getIntrinsicHeight(); \n         mDrawable.setBounds(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom()); \n         mDrawable.draw(canvas); \n         canvas.drawRect(0, 0, getWidth(), getHeight(), mPaint); \n     } \n  \n  \n  \n     @Override \n     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { \n         //如果不重写，自定义View在默认情况下不管是math_parent还是warp_content都能占满父容器的剩余空间。具体原因跟下代码就知道了。 \n         //super.onMeasure(widthMeasureSpec, heightMeasureSpec); \n         int width = mDrawable.getIntrinsicWidth() + getPaddingLeft() + getPaddingRight(); \n         int height = mDrawable.getIntrinsicHeight() + getPaddingTop() + getPaddingBottom(); \n         //view的大小由自己想要的大小和Constraints imposed by the parent确定 \n         //其中widthMeasureSpec由parent调用childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, mPaddingLeft + mPaddingRight, lp.width);获取 \n         //获取childMeasureSpec需要由父控件的规格+自己想要的规格综合确定 \n         setMeasuredDimension(resolveSize(width, widthMeasureSpec), resolveSize(height, heightMeasureSpec)); \n     } \n  \n } \n ``` \n  \n ## CustomViewGroup \n  \n 可以参考`FrameLayout`,`LinearLayout`等源码 \n  \n 1. 继承`ViewGroup`,并实现构造函数 \n 2. 重写`onMeasrure()`,处理子视图的`measure`并设置自己的宽高 \n 3. 重写`onLayout()`，处理子视图的`layout` \n 4. 重写`generateLayoutParams `系类函数，因为默认的LayoutParams只有`layout_width`和`layout_height`属性，处理不了`margin`。具体怎么用参考`LienarLayout`源码中怎么处理的 \n  \n  \n 处理子视图的`measure`，直接调用`measureChild()`或者`measureChildWithMargins()`,`measureChildren()` \n  \n ```java \n     protected void measureChild(View child, int parentWidthMeasureSpec, \n             int parentHeightMeasureSpec) { \n             //这里父视图读取了xml中的layoutParams,综合自己情况算出子视图的规格 \n         final LayoutParams lp = child.getLayoutParams(); \n \t\t\t \n         final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, \n                 mPaddingLeft + mPaddingRight, lp.width); \n         final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, \n                 mPaddingTop + mPaddingBottom, lp.height); \n  \n         child.measure(childWidthMeasureSpec, childHeightMeasureSpec); \n     } \n ``` \n  \n 处理子视图的`layout`,直接调用`child.layout(.....)` \n  \n  \n  \n ```java \n public class CustomViewGroup extends ViewGroup { \n  \n     public CustomViewGroup(Context context) { \n         super(context); \n         init(); \n     } \n  \n     public CustomViewGroup(Context context, AttributeSet attrs) { \n         this(context, attrs, 0); \n     } \n  \n     public CustomViewGroup(Context context, AttributeSet attrs, int defStyleAttr) { \n         this(context, attrs, defStyleAttr, 0); \n     } \n  \n     @TargetApi(Build.VERSION_CODES.LOLLIPOP) \n     public CustomViewGroup(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) { \n         super(context, attrs, defStyleAttr, defStyleRes); \n  \n         init(); \n     } \n  \n     private void init() { \n  \n     } \n  \n     @Override \n     protected LayoutParams generateDefaultLayoutParams() { \n         return super.generateDefaultLayoutParams(); \n     } \n  \n     @Override \n     protected LayoutParams generateLayoutParams(LayoutParams p) { \n         return super.generateLayoutParams(p); \n     } \n  \n     @Override \n     public LayoutParams generateLayoutParams(AttributeSet attrs) { \n         return super.generateLayoutParams(attrs); \n     } \n  \n     @Override \n     protected boolean checkLayoutParams(LayoutParams p) { \n         return super.checkLayoutParams(p); \n     } \n  \n     @Override \n     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { \n         int childCount = getChildCount(); \n  \n         int width = 0; \n         int height = 0; \n  \n //        measureChildren(widthMeasureSpec, heightMeasureSpec); \n         for (int i = 0; i < childCount; i++) { \n             View child = getChildAt(i); \n             if (child.getVisibility() != GONE) { \n                 measureChild(child, widthMeasureSpec, heightMeasureSpec); \n                 //width = width + child.getMeasuredWidth(); \n                 width = Math.max(width, child.getMeasuredWidth()); \n                 height = Math.max(height, child.getMeasuredHeight()); \n             } \n         } \n //        super.onMeasure(widthMeasureSpec, heightMeasureSpec); \n         setMeasuredDimension(resolveSize(width, widthMeasureSpec), resolveSize(height, heightMeasureSpec)); \n     } \n  \n     @Override \n     protected void onLayout(boolean changed, int l, int t, int r, int b) { \n         for (int i = 0; i < getChildCount(); i++) { \n             View child = getChildAt(i); \n  \n             int cl = 0; \n             int ct = 0; \n             int cb = child.getMeasuredHeight(); \n             int cr = child.getMeasuredWidth(); \n             child.layout(cl, ct, cr, cb); \n         } \n //        super.onLayout(changed, l, t, r, b); \n     } \n  \n  \n } \n ``` \n  \n ## 其他 \n measureSpec，onMeasure,onLayout,onDraw等基本概念 \n [http://www.eoeandroid.com/thread-556155-1-1.html]() \n  \n 讲解`resolveSizeAndState`中`childMeasuredState`作用，基本上不用管它，传值0就行了。 \n [http://stackoverflow.com/questions/13650903/whats-the-utility-of-the-third-argument-of-view-resolvesizeandstate \n ]() \n  \n 有讲resolveSizeAndState和MarginLayoutParams \n [http://blog.csdn.net/aigestudio/article/details/43378131]() \n  \n  \n 自定义View和自定义Layout的例子，里面有将margin参数的处理 \n [http://blog.csdn.net/aigestudio/article/details/42989325]() \n  \n [http://blog.csdn.net/aigestudio/article/details/43907299]()"}