{"title":"Android 单元测试实践","createTime":1587361762000,"updateTime":-1,"category":"default","content":" \n  \n # Android 单元测试 \n  \n 为什么以前没有写单元测试呢，有两个原因： \n * 没有使用过，没有亲身体验到单元测试的好处。体验过了就知道，虽然麻烦但值的去认真写 \n * 以前的代码架构和代码文件组织婚论，其中Repository,Service,Utils,Manager到处调用，没有明确的层次调用关系，造成不能系统的对一个层面的api进行单元测试，掌握测试范围。 \n  \n ## 为什么写单元测试 \n * 高效，方便的测试代码，不用运行整个项目 \n * 对自己的代码更有信心 \n * 方便的判断出代码的好坏（不容易测试就是坏代码） \n  \n 单元测试分为两种类型 \n 1. Local unit tests \n     * 代码可以运行在JVM \n     * 运行速度快 \n 2. Instrumented unit test:代码需要依赖Android SDK api \n     * 需要运行在模拟器或者真机上 \n     * 运行速度慢 \n  \n ![-w375](media/15859009095825/15859011412084.jpg) \n  \n 如果想代码进行local unit tests,但是代码依赖了 android api, 可以使用Mockito来模拟API。 \n  \n ## 单元测试的粒度划分 \n  \n ![](media/15859009095825/15859019011130.jpg) \n  \n ## Android项目测试相关的目录结构 \n  \n * app/src/main/java-项目源代码 \n * app/src/test/java-local unit test的测试代码 \n * app/src/androidTest/java-Instrumented unit test的测试代码 \n  \n 依赖 \n 使用`testImpementation`单独给`local unit test`添加依赖 \n ``` \n     testImplementation 'junit:junit:4.13' \n     testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3\" \n ``` \n 使用`androidTestImplementation`单独给`Instrumented unit test`添加依赖 \n ``` \n     androidTestImplementation 'androidx.test.ext:junit:1.1.1' \n     androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0' \n     androidTestImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3\" \n ``` \n  \n ## 单元测试的场景（实践） \n 添加单元测试的层面可以有 \n * WebApi：服务器接口的实现，方面的在单元测试中进行调试和验证。(unit test) \n * Service: 业务服务 (unit test) \n * Utils: 工具类方法(unit test) \n * Repository: 针对领域model的增删改查接口（double test） \n * UseCase: domain层暴露给外界的接口(double test) \n  \n double test: 就是需要伪造依赖的测试,例如 \n ```kotlin \n class RepositoryImpl( \n     private val dao: Dao, \n     private val webApi: WebApi \n ) \n ``` \n 我们就需要伪造FakeDaoImpl,FakeWebApiImpl两个假的实现。 \n  \n  \n ## 断言 \n Google Truth比junit的assert更好用 \n 添加依赖 \n ``` \n repositories { \n   mavenCentral() \n } \n dependencies { \n   testImplementation \"com.google.truth:truth:1.0.1\" \n } \n  \n ``` \n 使用 \n ``` \n import static com.google.common.truth.Truth.assertThat; \n import static com.google.common.truth.Truth.assertWithMessage; \n  \n // for assertions on Java 8 types (Streams and java.util.Optional) \n import static com.google.common.truth.Truth8.assertThat; \n  \n  \n assertThat(notificationText).contains(\"testuser@google.com\"); \n ``` \n  \n ## 实例技巧 \n * [androidTest和test公用测试代码](https://stackoverflow.com/questions/39519347/share-test-classes-between-test-and-androidtest) \n * [unit test中想使用android api，可以使用robolectric](http://robolectric.org/) \n  \n ## 参考资料 \n * https://truth.dev/ \n * https://www.vogella.com/tutorials/AndroidTesting/article.html \n * https://codelabs.developers.google.com/codelabs/advanced-android-kotlin-training-testing-basics/index.html?index=..%2F..index#0 \n  \n "}