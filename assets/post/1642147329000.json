{"title":"移动端App架构Demo mock_app","createTime":1642147329000,"updateTime":-1,"category":"架构设计","content":" \n  \n # MockApp \n 通过分层和接口的架构设计，实现可以快速Mock,单元测试的APP实例。 \n  \n ![](mock_app.png) \n  \n ## 功能 \n * 登录，注册。 \n * 发帖，帖子列表，评论。 \n * 帖子点赞和帖子收藏。 \n * 修改用户昵称和头像。 \n  \n ## 架构 \n * 三层结构：业务层，持久层，展示层。 \n * 本地实现业务逻辑。 \n * 使用内存来实现持久层。 \n  \n  \n ui:展示层，主要负责数据展示和用户交互。   \n  \n domain:业务层，利用抽象的Repository和Service接口实现业务逻辑UseCase，UseCase作为Api接口提供给三方使用。   \n  \n data:持久层具体实现。   \n  \n di: 通过ServiceLocator简单实现依赖注入，达到控制反转。   \n  \n  ![4](4.jpg) \n  \n domain层和data层中的代码，根据需求可能直接移动到服务端，就是常见到Server/Client模式。 \n  \n  \n  ![4](5.jpg) \n  \n    \n ## 思考 \n 和朋友讨论时，他问我这架构里面UI数据的缓存代码怎么写，怎么做网络请求的优化？ \n  \n 写这个Demo出来目的是根据代码职责，理清代码所在层次和所属角色。 \n    \n   具体的缓存策略和网络请求的优化，这个属于业务的具体实现，它的实现方法有各种各样，不是架构关心的内容，架构关心的是你的UI缓存代码肯定不能放在Domain中，你的网络请求优化代码肯定不能在Repository中。 \n    \n    \n   "}