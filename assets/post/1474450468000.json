{"title":"Android memory analysis","createTime":1474450468000,"updateTime":-1,"category":"default","content":" \n  \n  \n ##### 查看Android设备上单个进程的可用内存 \n  \n ```bash \n $ adb shell cat /system/build.prop \n  \n dalvik.vm.heapgrowthlimit=128m \n dalvik.vm.heapmaxfree=8m \n dalvik.vm.heapminfree=512k \n dalvik.vm.heapsize=256m \n dalvik.vm.heapstartsize=8m \n dalvik.vm.heaptargetutilization=0.75 \n ``` \n  \n ```bash \n $ adb shell getprop | grep dalvik.vm.heapgrowthlimit  \n [dalvik.vm.heapgrowthlimit]: [128m] \n ``` \n  \n  \n `dalvik.vm.heapsize `表示单个进程可用最大内存   \n `dalvik.vm.heapgrowthlimit `表示程序运行过程中实际只能使用的内存 \n  \n * dalvik.vm.heapstartsize \n > 堆分配的初始大小，调整这个值会影响到应用的流畅性和整体ram消耗。这个值越小，系统ram消耗越慢，但是由于初始值较小，一些较大的应用需要扩张这个堆，从而引发gc和堆调整的策略，会应用反应更慢。相反，这个值越大系统ram消耗越快，但是程序更流畅。 \n  \n * dalvik.vm.heapgrowthlimit \n > 受控情况下的极限堆（仅仅针对dalvik堆，不包括native堆）大小，dvm heap是可增长的，但是正常情况下dvm heap的大小是不会超过dalvik.vm.heapgrowthlimit的值（非正常情况下面会详细说明）。这个值控制那些受控应用的极限堆大小，如果受控的应用dvm heap size超过该值，则将引发oom（out of memory）。 \n * dalvik.vm.heapsize \n > 不受控情况下的极限堆大小，这个就是堆的最大值。不管它是不是受控的。这个值会影响非受控应用的dalvik heap size。一旦dalvik heap size超过这个值，直接引发oom。 \n  \n [android dalvik heap 浅析](http://blog.csdn.net/cqupt_chen/article/details/11068129) \n  \n ##### 查看进程的内存使用情况 \n  \n 1. `$ adb shell dumpsys meminfo com.huami.midong` \n  \n  \n 2. [使用进程统计信息查看内存使用情况](http://android-developers.blogspot.com.es/2014/01/process-stats-understanding-how-your.html) Settings > Developer options > Process Stats. \n  \n 3. Android Device Monitor查看，选中进程－>Update Heap  \n  \n 4. Android studio -> Android Monitor查看 \n \t \n \t\tActivity Manager state \n \t\tPackageInformation \n \t\tMemory Usage \n \t\tMemory user over time \n \t\tGraphics State \n \t\tMemory 查看内存使用情况，发起gc \n \t\tCPU \n \t\tNetwork \n \t\t \n [Memory Monitor](https://developer.android.com/studio/profile/am-memory.html?utm_medium=android-studio) \n  \n ##### 内存泄漏，内存优化分析 \n  \n 两个思路 \n  \n * 通过`mat`分析占用大内存的可疑对象，为什么没有释放 \n * 通过`Android studio`的 `memory montior`的`Reference Tree`分析哪些类拥有引用是可疑的，比较他们的生命周期 \n  \n \t\tAndroid studio Memory Monitory －> Dump java heap -> Analyzer Task -> Detect Leaked Activities / Find Duplicate Strings \n  \n [Android studio中分析 Dump java heap](https://developer.android.com/studio/profile/am-hprof.html) \n  \n  \n  \n 这两天发现了4个oom问题 \n  \n 1. 高斯模糊渐变效果实现方案优化，减少内存使用避免oom \n 2. 自定义字体使用`Tpyeface.createFromAsset()`导致内存泄漏 \n 3. static 变量引用Activity导致 activity leak \n 4. LocationListener没有注销导致 activity leak \n  \n \t\t \n  \n  \n "}