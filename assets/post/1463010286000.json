{"title":"Android拍照后获取图片","createTime":1463010286000,"updateTime":1463010825000,"category":"default","content":" \n  \n    Android调用相机拍照时，如果设置了保存路径则不会直接返回bitmap,反之会返回一个调整过角度的压缩的图片。 \n     \n ```java \n     // First handle the no crop case -- just return the value.  If the \n             // caller specifies a \"save uri\" then write the data to it's \n             // stream. Otherwise, pass back a scaled down version of the bitmap \n             // directly in the extras. \n             if (mSaveUri != null) { \n                 OutputStream outputStream = null; \n                 try { \n                     outputStream = mContentResolver.openOutputStream(mSaveUri); \n                     outputStream.write(data); \n                     outputStream.close(); \n                     setResult(RESULT_OK); \n                     finish(); \n                 } catch (IOException ex) { \n                     // ignore exception \n                 } finally { \n                     Util.closeSilently(outputStream); \n                 } \n             } else { \n                 Bitmap bitmap = createCaptureBitmap(data); \n                 setResult(RESULT_OK, \n                         new Intent(\"inline-data\").putExtra(\"data\", bitmap)); \n                 finish(); \n             } \n ``` \n   \n     \n ```java    \n     public static int getExifOrientation(String filepath) { \n \t        int degree = 0; \n \t        ExifInterface exif = null; \n \t        try { \n \t            exif = new ExifInterface(filepath); \n \t        } catch (IOException ex) { \n \t            Log.e(TAG, \"cannot read exif\", ex); \n \t        } \n \t        if (exif != null) { \n \t            int orientation = exif.getAttributeInt( \n \t                ExifInterface.TAG_ORIENTATION, -1); \n \t            if (orientation != -1) { \n \t                // We only recognize a subset of orientation tag values. \n \t                switch(orientation) { \n \t                    case ExifInterface.ORIENTATION_ROTATE_90: \n \t                        degree = 90; \n \t                        break; \n \t                    case ExifInterface.ORIENTATION_ROTATE_180: \n \t                        degree = 180; \n \t                        break; \n \t                    case ExifInterface.ORIENTATION_ROTATE_270: \n \t                        degree = 270; \n \t                        break; \n \t                } \n  \n  \n \t            } \n \t        } \n \t        return degree; \n \t    } \n  \n  \n     private Bitmap createCaptureBitmap(byte[] data) { \n \t        // This is really stupid...we just want to read the orientation in \n \t        // the jpeg header. \n \t        String filepath = ImageManager.getTempJpegPath(); \n \t        int degree = 0; \n \t        if (saveDataToFile(filepath, data)) { \n \t            degree = ImageManager.getExifOrientation(filepath); \n \t            new File(filepath).delete(); \n \t        } \n \t \n \t        // Limit to 50k pixels so we can return it in the intent. \n \t        Bitmap bitmap = Util.makeBitmap(data, 50*1024); \n \t        bitmap = Util.rotate(bitmap, degree); \n \t        return bitmap; \n \t    } \n  \n  \n     public boolean saveDataToFile(String filePath, byte[] data) { \n \t        FileOutputStream f = null; \n \t        try { \n \t            f = new FileOutputStream(filePath); \n \t            f.write(data); \n \t        } catch (IOException e) { \n \t            return false; \n \t        } finally { \n \t            MenuHelper.closeSilently(f); \n \t        } \n \t        return true; \n \t    } \n ``` \n  \n // 这里面很多好用的代码,但是没搞懂这是哪个版本的代码？发现LG手机拍照后返回的图片没有调整过角度 \n https://android.googlesource.com/platform/packages/apps/Camera/+/b02ebbea2d3d98a3ab2c15cb152387b9d201dd18/src/com/android/camera"}