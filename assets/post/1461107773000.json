{"title":"Android 单元测试笔记","createTime":1461107773000,"updateTime":1461107807000,"category":"default","content":" \n  \n [Getting Started With Testing](http://developer.android.com/intl/zh-cn/training/testing/start/index.htm) \n  \n 两种类型的单元测试 \n  \n 1. Local unit tests \n 2. Instrumented tests \n  \n  \n  \n ## [Local Unit Tests](http://developer.android.com/intl/zh-cn/training/testing/unit-testing/local-unit-tests.html#build) \n  \n 1. 代码放在`src/test/java`中 \n 2. 使用`Junit 4` 和`Mockito`添加依赖 \n  \n ``` \n dependencies { \n     // Required -- JUnit 4 framework \n     testCompile 'junit:junit:4.12' \n     // Optional -- Mockito framework \n     testCompile 'org.mockito:mockito-core:1.10.19' \n } \n ``` \n  \n 3. 编写测试代码 \n  \n ```java \n  \n @RunWith(MockitoJUnitRunner.class) \n public class UnitTestSample { \n  \n     private static final String FAKE_STRING = \"HELLO WORLD\"; \n  \n     @Mock \n     Context mMockContext; \n  \n     @Test \n     public void readStringFromContext_LocalizedString() { \n         // Given a mocked Context injected into the object under test... \n         when(mMockContext.getString(R.string.hello_word)) \n                 .thenReturn(FAKE_STRING); \n         ClassUnderTest myObjectUnderTest = new ClassUnderTest(mMockContext); \n  \n         // ...when the string is returned from the object under test... \n         String result = myObjectUnderTest.getHelloWorldString(); \n  \n         // ...then the result should be the expected one. \n         assertThat(result, is(FAKE_STRING)); \n     } \n } \n ``` \n  \n ## Instrumented Tests  \n 有三种类型 \n  \n 1. Building Instrumented Unit Tests \n 2. Automating User Interface Tests  \n 3. Testing App Component Integrations  \n  \n  \n [Building Instrumented Unit Tests](http://developer.android.com/intl/zh-cn/training/testing/unit-testing/instrumented-unit-tests.html) \n  \n 1. 代码放在`src/androidTest/java` \n 2. 添加依赖 \n  \n ``` \n dependencies { \n     androidTestCompile 'com.android.support:support-annotations:23.0.1' \n     androidTestCompile 'com.android.support.test:runner:0.4.1' \n     androidTestCompile 'com.android.support.test:rules:0.4.1' \n     // Optional -- Hamcrest library \n     androidTestCompile 'org.hamcrest:hamcrest-library:1.3' \n     // Optional -- UI testing with Espresso \n     androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1' \n     // Optional -- UI testing with UI Automator \n     androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1' \n } \n ``` \n  \n 3. Specify `AndroidJunitRunner` as the default test instrumentation runner. The Testing Support Library includes a JUnit 4 test runner \n  \n ``` \n android { \n     defaultConfig { \n         testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" \n     } \n } \n ``` \n  \n 4. 编写测试代码 \n  \n ```java \n @RunWith(AndroidJUnit4.class) \n @SmallTest \n public class LogHistoryAndroidUnitTest { \n  \n     public static final String TEST_STRING = \"This is a string\"; \n     public static final long TEST_LONG = 12345678L; \n     private LogHistory mLogHistory; \n  \n     @Before \n     public void createLogHistory() { \n         mLogHistory = new LogHistory(); \n     } \n  \n     @Test \n     public void logHistory_ParcelableWriteRead() { \n         // Set up the Parcelable object to send and receive. \n         mLogHistory.addEntry(TEST_STRING, TEST_LONG); \n  \n         // Write the data. \n         Parcel parcel = Parcel.obtain(); \n         mLogHistory.writeToParcel(parcel, mLogHistory.describeContents()); \n  \n         // After you're done with writing, you need to reset the parcel for reading. \n         parcel.setDataPosition(0); \n  \n         // Read the data. \n         LogHistory createdFromParcel = LogHistory.CREATOR.createFromParcel(parcel); \n         List<Pair<String, Long>> createdFromParcelData = createdFromParcel.getData(); \n  \n         // Verify that the received data is correct. \n         assertThat(createdFromParcelData.size(), is(1)); \n         assertThat(createdFromParcelData.get(0).first, is(TEST_STRING)); \n         assertThat(createdFromParcelData.get(0).second, is(TEST_LONG)); \n     } \n } \n ``` \n  \n  \n "}