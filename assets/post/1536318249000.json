{"title":"Web Api and Repository","createTime":1536318249000,"updateTime":-1,"category":"default","content":" \n  \n # Web Api和Repository处理 \n  \n 之前一直疑惑LocalModelRepository,RemoteModelRepository,api接口代码怎么写，他们应该属于框架里的哪个角色？ \n  \n ## 服务端Api有两层 \n 1. 应用无关的细粒度接口 \n 2. 应用相关的粗粒度接口 \n  \n 提供给客户端的应该是应用相关的粗粒度接口 \n  \n 接口的代码写成WebApiService,由Usecase调用 \n  \n  \n  \n ## 框架流程 \n  \n `ViewModel`是指`android.arch.lifecycle.ViewModel`,UI和数据之间的桥梁，相当于`Controller` \n  \n 1. 简单的：UI->ViewModel->WebApiService \n 2. 复杂的：UI->ViewModel->Usecase->ModelRepository/WebApiService \n  \n  \n  \n ## Repository \n  \n 结论：不应该存在RemoteRepository,Repository只表示本地仓库 \n  \n * 数据的来源有时在功能需求上是要明确表现出来的，所以不能盲目的屏蔽数据的来源，封装城一个Repository，提供一个接口。 \n * WebApi是应用相关的接口，直接就相当于Usecase了。不能把他当作远程仓库的接口 \n  \n ## Package \n  \n ``` \n domain \n \t- model\t\t\t\t\t//domain model 业务模型 \n \t- repository \t\t\t//interface:本地数据的增删改查 \n \t- service \t \n \t\t- apiService \t\t//interface:服务端提供的网络接口 \n \t\t- elseService \t\t//interface:细粒度的业务功能单元  \n \t- usecase\t\t\t\t//粗粒度的应用层的业务功能，由service,repository,model组装而成 \n  \n data \n \t- model\t\t\t\t\t//持久层model \n \t- repository        \t//impl:repository的具体实现 \n  \n device \n \t- service\t\t\t\t//impl:service的具体实现 \n  \n app \n \t- ui \t\t\t\t\t//ui 实现\t  \n ``` \n  \n ## Links \n  \n https://blog.csdn.net/yu870646595/article/details/51900478"}